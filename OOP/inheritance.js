// ------------------------------ Наследственность в ООП ------------------------------

// Наследование позволяет создавать новый класс на основе существующего класса.
// Новый класс (производный класс) наследует свойства и методы базового класса,
// что позволяет повторно использовать код и создавать иерархии классов.

// Базовый класс
class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} издает звук.`);
    }
}

// Производный класс
class Dog extends Animal {
    constructor(name, breed) {
        super(name); // Вызов конструктора базового класса
        this.breed = breed;
    }

    speak() {
        console.log(`${this.name} лает.`);
    }
}

// Еще один производный класс
class Cat extends Animal {
    constructor(name, color) {
        super(name); // Вызов конструктора базового класса
        this.color = color;
    }

    speak() {
        console.log(`${this.name} мяукает.`);
    }
}

// Создание экземпляров классов
const dog = new Dog('Рекс', 'Немецкая овчарка');
const cat = new Cat('Мурка', 'Серый');

// Вызов методов
dog.speak(); // Рекс лает.
cat.speak(); // Мурка мяукает.

// Проверка наследования
console.log(dog instanceof Animal); // true
console.log(cat instanceof Animal); // true

// ------------------------------ Конец примера ------------------------------
// В этом примере класс Animal является базовым классом с методом speak.
// Классы Dog и Cat наследуют от Animal и переопределяют метод speak для предоставления специфического поведения.
